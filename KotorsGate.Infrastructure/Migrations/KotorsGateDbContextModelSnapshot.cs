// <auto-generated />
using System;
using KotorsGate.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KotorsGate.Infrastructure.Migrations
{
    [DbContext(typeof(KotorsGateDbContext))]
    partial class KotorsGateDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Ability.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Abilities", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Feat.ClassFeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("FeatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.ToTable("ClassFeats", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Feat.Feat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ToolTip")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Feats", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Feat.FeatProgression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RequiredFeatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequiredFeatId");

                    b.ToTable("FeatProgressions", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Power.ClassPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("PowerId");

                    b.ToTable("ClassPowers", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Power.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("BaseCost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ToolTip")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Powers", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Power.PowerProgression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RequiredPowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequiredPowerId");

                    b.ToTable("PowerProgressions", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Skill.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Campaigns", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.CampaignQuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("QuestId");

                    b.ToTable("CampaignQuests", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.CampaignQuestObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignQuestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("QuestObjectiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignQuestId");

                    b.HasIndex("QuestObjectiveId");

                    b.ToTable("CampaignQuestObjectives", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsMainQuest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Quests", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.QuestObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int>("SequencePosition")
                        .HasMaxLength(128)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestObjectives", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Alignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("CurrentForcePoints")
                        .HasMaxLength(5000)
                        .HasColumnType("int");

                    b.Property<int>("CurrentHitPoints")
                        .HasMaxLength(5000)
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TotalForcePoints")
                        .HasMaxLength(5000)
                        .HasColumnType("int");

                    b.Property<int>("TotalHitPoints")
                        .HasMaxLength(5000)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(99)
                        .HasColumnType("int")
                        .HasDefaultValue(8);

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAbilities", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterFeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("FeatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("FeatId");

                    b.ToTable("CharacterFeats", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterItems", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("PartyId");

                    b.ToTable("CharacterParties", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("PowerId");

                    b.ToTable("CharacterPowers", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserCampaignId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCampaignId");

                    b.ToTable("Parties", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.CharacterDialogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterDialogues", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.DialogueLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DialogueId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.HasKey("Id");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueLines", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.QuestDialogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestDialogues", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DialogueLineId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.HasKey("Id");

                    b.HasIndex("DialogueLineId");

                    b.ToTable("Responses", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsConsumable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Items.ItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxValue")
                        .HasMaxLength(1028)
                        .HasColumnType("int");

                    b.Property<int?>("MinValue")
                        .HasMaxLength(1028)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("SingleValue")
                        .HasMaxLength(1028)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemAttributes", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Items.ItemClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("ItemClassifications", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.Battlefield", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Battlefields", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.BattlefieldSquare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BattlefieldId")
                        .HasColumnType("int");

                    b.Property<int>("XCoordinate")
                        .HasMaxLength(64)
                        .HasColumnType("int");

                    b.Property<int>("YCoordinate")
                        .HasMaxLength(64)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BattlefieldId");

                    b.ToTable("BattlefieldSquares", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.CampaignPlanet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("PlanetId");

                    b.ToTable("CampaignPlanets", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignPlanetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignPlanetId");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.LocationMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdjacentLocationId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationMaps", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Planets", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.UserCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCampaigns", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.UserCampaignCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("UserCampaignId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("UserCampaignId");

                    b.ToTable("UserCampaignCharacters", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.UserCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCharacters", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Feat.ClassFeat", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Class", "Class")
                        .WithMany("ClassFeats")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Feat.Feat", "Feat")
                        .WithMany("ClassFeats")
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Feat");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Feat.FeatProgression", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Feat.Feat", "Feat")
                        .WithMany("FeatProgressions")
                        .HasForeignKey("RequiredFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feat");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Power.ClassPower", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Class", "Class")
                        .WithMany("ClassPowers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Power.Power", "Power")
                        .WithMany("ClassPowers")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Power.PowerProgression", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Power.Power", "Power")
                        .WithMany("PowerProgressions")
                        .HasForeignKey("RequiredPowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Power");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.CampaignQuest", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany("CampaignQuests")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Campaigns.Quest", "Quest")
                        .WithMany("CampaignQuests")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.CampaignQuestObjective", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Campaigns.CampaignQuest", "CampaignQuest")
                        .WithMany("CampaignQuestObjectives")
                        .HasForeignKey("CampaignQuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Campaigns.QuestObjective", "QuestObjective")
                        .WithMany("CampaignQuestObjectives")
                        .HasForeignKey("QuestObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignQuest");

                    b.Navigation("QuestObjective");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.QuestObjective", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Campaigns.Quest", "Quest")
                        .WithMany("QuestObjectives")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterAbility", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Ability.Ability", "Ability")
                        .WithMany("CharacterAbilities")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("CharacterAbilities")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterFeat", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("CharacterFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Feat.Feat", "Feat")
                        .WithMany("CharacterFeats")
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Feat");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterItem", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("CharacterItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Items.Item", "Item")
                        .WithMany("CharacterItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterParty", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("CharacterParties")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Characters.Party", "Party")
                        .WithMany("CharacterParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterPower", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("CharacterPowers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Power.Power", "Power")
                        .WithMany("CharacterPowers")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.CharacterSkill", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Abilities.Skill.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.Party", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.User.UserCampaign", "UserCampaign")
                        .WithMany("Parties")
                        .HasForeignKey("UserCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCampaign");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.CharacterDialogue", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("CharacterDialogues")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.DialogueLine", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Dialogue.QuestDialogue", "QuestDialogue")
                        .WithMany("DialogueLines")
                        .HasForeignKey("DialogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestDialogue");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.QuestDialogue", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Campaigns.Quest", "Quest")
                        .WithMany("QuestDialogues")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.Response", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Dialogue.DialogueLine", "DialogueLine")
                        .WithMany("Responses")
                        .HasForeignKey("DialogueLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DialogueLine");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Items.Item", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Items.ItemClassification", "ItemClassification")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ItemClassification");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Items.ItemAttribute", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Items.Item", "Item")
                        .WithMany("ItemAttributes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.Battlefield", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Location.Location", "Location")
                        .WithMany("Battlefields")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.BattlefieldSquare", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Location.Battlefield", "Battlefield")
                        .WithMany("BattlefieldSquares")
                        .HasForeignKey("BattlefieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battlefield");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.CampaignPlanet", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany("CampaignPlanets")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.Location.Planet", "Planet")
                        .WithMany("CampaignPlanets")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.Location", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Location.CampaignPlanet", "CampaignPlanet")
                        .WithMany("Locations")
                        .HasForeignKey("CampaignPlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignPlanet");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.LocationMap", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Location.Location", "Location")
                        .WithMany("LocationMaps")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.UserCampaign", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany("UserCampaigns")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.User.User", "User")
                        .WithMany("UserCampaigns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.UserCampaignCharacter", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("UserCampaignCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.User.UserCampaign", "UserCampaign")
                        .WithMany("UserCampaignCharacters")
                        .HasForeignKey("UserCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("UserCampaign");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.UserCharacter", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.Characters.Character", "Character")
                        .WithMany("UserCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.User.User", "User")
                        .WithMany("UserCharacters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KotorsGate.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KotorsGate.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Ability.Ability", b =>
                {
                    b.Navigation("CharacterAbilities");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Class", b =>
                {
                    b.Navigation("ClassFeats");

                    b.Navigation("ClassPowers");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Feat.Feat", b =>
                {
                    b.Navigation("CharacterFeats");

                    b.Navigation("ClassFeats");

                    b.Navigation("FeatProgressions");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Power.Power", b =>
                {
                    b.Navigation("CharacterPowers");

                    b.Navigation("ClassPowers");

                    b.Navigation("PowerProgressions");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Abilities.Skill.Skill", b =>
                {
                    b.Navigation("CharacterSkills");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.Campaign", b =>
                {
                    b.Navigation("CampaignPlanets");

                    b.Navigation("CampaignQuests");

                    b.Navigation("UserCampaigns");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.CampaignQuest", b =>
                {
                    b.Navigation("CampaignQuestObjectives");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.Quest", b =>
                {
                    b.Navigation("CampaignQuests");

                    b.Navigation("QuestDialogues");

                    b.Navigation("QuestObjectives");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Campaigns.QuestObjective", b =>
                {
                    b.Navigation("CampaignQuestObjectives");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.Character", b =>
                {
                    b.Navigation("CharacterAbilities");

                    b.Navigation("CharacterDialogues");

                    b.Navigation("CharacterFeats");

                    b.Navigation("CharacterItems");

                    b.Navigation("CharacterParties");

                    b.Navigation("CharacterPowers");

                    b.Navigation("CharacterSkills");

                    b.Navigation("UserCampaignCharacters");

                    b.Navigation("UserCharacters");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Characters.Party", b =>
                {
                    b.Navigation("CharacterParties");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.DialogueLine", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Dialogue.QuestDialogue", b =>
                {
                    b.Navigation("DialogueLines");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Items.Item", b =>
                {
                    b.Navigation("CharacterItems");

                    b.Navigation("ItemAttributes");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Items.ItemClassification", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.Battlefield", b =>
                {
                    b.Navigation("BattlefieldSquares");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.CampaignPlanet", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.Location", b =>
                {
                    b.Navigation("Battlefields");

                    b.Navigation("LocationMaps");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.Location.Planet", b =>
                {
                    b.Navigation("CampaignPlanets");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.User", b =>
                {
                    b.Navigation("UserCampaigns");

                    b.Navigation("UserCharacters");
                });

            modelBuilder.Entity("KotorsGate.Domain.Entities.User.UserCampaign", b =>
                {
                    b.Navigation("Parties");

                    b.Navigation("UserCampaignCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
